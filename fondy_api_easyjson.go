// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package fondy_api

import (
	json "encoding/json"
	easyjson "github.com/hhh0pE/easyjson"
	jlexer "github.com/hhh0pE/easyjson/jlexer"
	jwriter "github.com/hhh0pE/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson7856a7d3DecodeGithubComHhh0pEFondyApi(in *jlexer.Lexer, out *urlResponseWrapper) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "response":
			(out.Response).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7856a7d3EncodeGithubComHhh0pEFondyApi(out *jwriter.Writer, in urlResponseWrapper) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"response\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Response).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v urlResponseWrapper) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7856a7d3EncodeGithubComHhh0pEFondyApi(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v urlResponseWrapper) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7856a7d3EncodeGithubComHhh0pEFondyApi(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *urlResponseWrapper) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7856a7d3DecodeGithubComHhh0pEFondyApi(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *urlResponseWrapper) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7856a7d3DecodeGithubComHhh0pEFondyApi(l, v)
}
func easyjson7856a7d3DecodeGithubComHhh0pEFondyApi1(in *jlexer.Lexer, out *finalResponseWrapper) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "response":
			(out.Response).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7856a7d3EncodeGithubComHhh0pEFondyApi1(out *jwriter.Writer, in finalResponseWrapper) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"response\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Response).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v finalResponseWrapper) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7856a7d3EncodeGithubComHhh0pEFondyApi1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v finalResponseWrapper) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7856a7d3EncodeGithubComHhh0pEFondyApi1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *finalResponseWrapper) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7856a7d3DecodeGithubComHhh0pEFondyApi1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *finalResponseWrapper) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7856a7d3DecodeGithubComHhh0pEFondyApi1(l, v)
}
func easyjson7856a7d3DecodeGithubComHhh0pEFondyApi2(in *jlexer.Lexer, out *URLResultResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "checkout_url":
			out.CheckoutURL = string(in.String())
		case "payment_id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.PaymentID).UnmarshalJSON(data))
			}
		case "response_status":
			out.ResponseStatus = string(in.String())
		case "error_message":
			out.ErrorMessage = string(in.String())
		case "error_code":
			out.ErrorCode = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7856a7d3EncodeGithubComHhh0pEFondyApi2(out *jwriter.Writer, in URLResultResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"checkout_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CheckoutURL))
	}
	{
		const prefix string = ",\"payment_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.PaymentID).MarshalJSON())
	}
	{
		const prefix string = ",\"response_status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ResponseStatus))
	}
	{
		const prefix string = ",\"error_message\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ErrorMessage))
	}
	{
		const prefix string = ",\"error_code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ErrorCode))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v URLResultResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7856a7d3EncodeGithubComHhh0pEFondyApi2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v URLResultResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7856a7d3EncodeGithubComHhh0pEFondyApi2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *URLResultResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7856a7d3DecodeGithubComHhh0pEFondyApi2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *URLResultResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7856a7d3DecodeGithubComHhh0pEFondyApi2(l, v)
}
func easyjson7856a7d3DecodeGithubComHhh0pEFondyApi3(in *jlexer.Lexer, out *RefundOrderRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "order_id":
			out.OrderID = string(in.String())
		case "amount":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Amount).UnmarshalJSON(data))
			}
		case "currency":
			out.Currency = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7856a7d3EncodeGithubComHhh0pEFondyApi3(out *jwriter.Writer, in RefundOrderRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"order_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OrderID))
	}
	{
		const prefix string = ",\"amount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Amount).MarshalJSON())
	}
	{
		const prefix string = ",\"currency\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Currency))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RefundOrderRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7856a7d3EncodeGithubComHhh0pEFondyApi3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RefundOrderRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7856a7d3EncodeGithubComHhh0pEFondyApi3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RefundOrderRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7856a7d3DecodeGithubComHhh0pEFondyApi3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RefundOrderRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7856a7d3DecodeGithubComHhh0pEFondyApi3(l, v)
}
func easyjson7856a7d3DecodeGithubComHhh0pEFondyApi4(in *jlexer.Lexer, out *PaymentByToken) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "order_id":
			out.OrderID = string(in.String())
		case "order_desc":
			out.OrderDescription = string(in.String())
		case "amount":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Amount).UnmarshalJSON(data))
			}
		case "currency":
			out.Currency = string(in.String())
		case "sender_email":
			out.SenderEmail = string(in.String())
		case "merchant_data":
			if m, ok := out.MerchantData.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.MerchantData.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.MerchantData = in.Interface()
			}
		case "lang":
			out.LanguageCode = string(in.String())
		case "rectoken":
			out.Rectoken = string(in.String())
		case "lifetime":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Lifetime).UnmarshalJSON(data))
			}
		case "server_callback_url":
			out.ServerCallbackURL = string(in.String())
		case "cvv2":
			out.CVV2 = string(in.String())
		case "client_ip":
			out.ClientIP = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7856a7d3EncodeGithubComHhh0pEFondyApi4(out *jwriter.Writer, in PaymentByToken) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"order_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OrderID))
	}
	{
		const prefix string = ",\"order_desc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OrderDescription))
	}
	{
		const prefix string = ",\"amount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Amount).MarshalJSON())
	}
	{
		const prefix string = ",\"currency\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Currency))
	}
	if in.SenderEmail != "" {
		const prefix string = ",\"sender_email\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SenderEmail))
	}
	if in.MerchantData != nil {
		const prefix string = ",\"merchant_data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.MerchantData.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.MerchantData.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.MerchantData))
		}
	}
	if in.LanguageCode != "" {
		const prefix string = ",\"lang\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LanguageCode))
	}
	if in.Rectoken != "" {
		const prefix string = ",\"rectoken\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Rectoken))
	}
	if in.Lifetime != 0 {
		const prefix string = ",\"lifetime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Lifetime).MarshalJSON())
	}
	if in.ServerCallbackURL != "" {
		const prefix string = ",\"server_callback_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ServerCallbackURL))
	}
	if in.CVV2 != "" {
		const prefix string = ",\"cvv2\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CVV2))
	}
	if in.ClientIP != "" {
		const prefix string = ",\"client_ip\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ClientIP))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PaymentByToken) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7856a7d3EncodeGithubComHhh0pEFondyApi4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PaymentByToken) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7856a7d3EncodeGithubComHhh0pEFondyApi4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PaymentByToken) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7856a7d3DecodeGithubComHhh0pEFondyApi4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PaymentByToken) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7856a7d3DecodeGithubComHhh0pEFondyApi4(l, v)
}
func easyjson7856a7d3DecodeGithubComHhh0pEFondyApi5(in *jlexer.Lexer, out *GetPaymentStatusRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "order_id":
			out.OrderID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7856a7d3EncodeGithubComHhh0pEFondyApi5(out *jwriter.Writer, in GetPaymentStatusRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"order_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OrderID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetPaymentStatusRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7856a7d3EncodeGithubComHhh0pEFondyApi5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetPaymentStatusRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7856a7d3EncodeGithubComHhh0pEFondyApi5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetPaymentStatusRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7856a7d3DecodeGithubComHhh0pEFondyApi5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetPaymentStatusRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7856a7d3DecodeGithubComHhh0pEFondyApi5(l, v)
}
func easyjson7856a7d3DecodeGithubComHhh0pEFondyApi6(in *jlexer.Lexer, out *FinalResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "order_id":
			out.OrderID = string(in.String())
		case "merchant_id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.MerchantID).UnmarshalJSON(data))
			}
		case "amount":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Amount).UnmarshalJSON(data))
			}
		case "currency":
			out.Currency = string(in.String())
		case "order_status":
			out.OrderStatus = string(in.String())
		case "signature":
			out.Signature = string(in.String())
		case "tran_type":
			out.TransactionType = string(in.String())
		case "sender_cell_phone":
			out.SenderCellPhone = string(in.String())
		case "sender_account":
			out.SenderAccount = string(in.String())
		case "masked_card":
			out.MaskedCard = string(in.String())
		case "card_bin":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CardBin).UnmarshalJSON(data))
			}
		case "card_type":
			out.CardType = string(in.String())
		case "rrn":
			out.RRN = string(in.String())
		case "approval_code":
			out.ApprovalCode = string(in.String())
		case "response_code":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ResponseCode).UnmarshalJSON(data))
			}
		case "response_description":
			out.ResponseDescription = string(in.String())
		case "reversal_amount":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ReversalAmount).UnmarshalJSON(data))
			}
		case "settlement_amount":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.SettlementAmount).UnmarshalJSON(data))
			}
		case "settlement_currency":
			out.SettlementCurrency = string(in.String())
		case "order_time":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.OrderTime).UnmarshalJSON(data))
			}
		case "settlement_date":
			out.SettlementDate = string(in.String())
		case "eci":
			out.Eci = string(in.String())
		case "fee":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Fee).UnmarshalJSON(data))
			}
		case "payment_system":
			out.PaymentSystem = string(in.String())
		case "sender_email":
			out.SenderEmail = string(in.String())
		case "payment_id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.PaymentID).UnmarshalJSON(data))
			}
		case "merchant_data":
			out.MerchantData = string(in.String())
		case "verification_status":
			out.VerificationStatus = string(in.String())
		case "rectoken":
			out.Rectoken = string(in.String())
		case "rectoken_lifetime":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.RectokenLifetime).UnmarshalJSON(data))
			}
		case "response_status":
			out.ResponseStatus = string(in.String())
		case "error_message":
			out.ErrorMessage = string(in.String())
		case "error_code":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ErrorCode).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7856a7d3EncodeGithubComHhh0pEFondyApi6(out *jwriter.Writer, in FinalResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"order_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OrderID))
	}
	{
		const prefix string = ",\"merchant_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.MerchantID).MarshalJSON())
	}
	{
		const prefix string = ",\"amount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Amount).MarshalJSON())
	}
	{
		const prefix string = ",\"currency\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Currency))
	}
	{
		const prefix string = ",\"order_status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OrderStatus))
	}
	{
		const prefix string = ",\"signature\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Signature))
	}
	{
		const prefix string = ",\"tran_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TransactionType))
	}
	{
		const prefix string = ",\"sender_cell_phone\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SenderCellPhone))
	}
	{
		const prefix string = ",\"sender_account\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SenderAccount))
	}
	{
		const prefix string = ",\"masked_card\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MaskedCard))
	}
	{
		const prefix string = ",\"card_bin\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.CardBin).MarshalJSON())
	}
	{
		const prefix string = ",\"card_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CardType))
	}
	{
		const prefix string = ",\"rrn\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RRN))
	}
	{
		const prefix string = ",\"approval_code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ApprovalCode))
	}
	{
		const prefix string = ",\"response_code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.ResponseCode).MarshalJSON())
	}
	{
		const prefix string = ",\"response_description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ResponseDescription))
	}
	{
		const prefix string = ",\"reversal_amount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.ReversalAmount).MarshalJSON())
	}
	{
		const prefix string = ",\"settlement_amount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.SettlementAmount).MarshalJSON())
	}
	{
		const prefix string = ",\"settlement_currency\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SettlementCurrency))
	}
	{
		const prefix string = ",\"order_time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.OrderTime).MarshalJSON())
	}
	{
		const prefix string = ",\"settlement_date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SettlementDate))
	}
	{
		const prefix string = ",\"eci\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Eci))
	}
	{
		const prefix string = ",\"fee\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Fee).MarshalJSON())
	}
	{
		const prefix string = ",\"payment_system\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PaymentSystem))
	}
	{
		const prefix string = ",\"sender_email\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SenderEmail))
	}
	{
		const prefix string = ",\"payment_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.PaymentID).MarshalJSON())
	}
	{
		const prefix string = ",\"merchant_data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MerchantData))
	}
	{
		const prefix string = ",\"verification_status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.VerificationStatus))
	}
	{
		const prefix string = ",\"rectoken\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Rectoken))
	}
	{
		const prefix string = ",\"rectoken_lifetime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.RectokenLifetime).MarshalJSON())
	}
	{
		const prefix string = ",\"response_status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ResponseStatus))
	}
	{
		const prefix string = ",\"error_message\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ErrorMessage))
	}
	{
		const prefix string = ",\"error_code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.ErrorCode).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FinalResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7856a7d3EncodeGithubComHhh0pEFondyApi6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FinalResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7856a7d3EncodeGithubComHhh0pEFondyApi6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FinalResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7856a7d3DecodeGithubComHhh0pEFondyApi6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FinalResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7856a7d3DecodeGithubComHhh0pEFondyApi6(l, v)
}
func easyjson7856a7d3DecodeGithubComHhh0pEFondyApi7(in *jlexer.Lexer, out *CreatePaymentRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "order_id":
			out.OrderID = string(in.String())
		case "order_desc":
			out.OrderDescription = string(in.String())
		case "amount":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Amount).UnmarshalJSON(data))
			}
		case "currency":
			out.Currency = string(in.String())
		case "sender_email":
			out.SenderEmail = string(in.String())
		case "merchant_data":
			if m, ok := out.MerchantData.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.MerchantData.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.MerchantData = in.Interface()
			}
		case "lang":
			out.LanguageCode = string(in.String())
		case "required_rectoken":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.RequiredRectoken).UnmarshalJSON(data))
			}
		case "rectoken":
			out.Rectoken = string(in.String())
		case "verification":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Verification).UnmarshalJSON(data))
			}
		case "verification_type":
			out.VerificationType = string(in.String())
		case "lifetime":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Lifetime).UnmarshalJSON(data))
			}
		case "pre_auth":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.PreAuth).UnmarshalJSON(data))
			}
		case "response_url":
			out.ResponseURL = string(in.String())
		case "server_callback_url":
			out.ServerCallbackURL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7856a7d3EncodeGithubComHhh0pEFondyApi7(out *jwriter.Writer, in CreatePaymentRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"order_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OrderID))
	}
	{
		const prefix string = ",\"order_desc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OrderDescription))
	}
	{
		const prefix string = ",\"amount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Amount).MarshalJSON())
	}
	{
		const prefix string = ",\"currency\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Currency))
	}
	if in.SenderEmail != "" {
		const prefix string = ",\"sender_email\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SenderEmail))
	}
	if in.MerchantData != nil {
		const prefix string = ",\"merchant_data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.MerchantData.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.MerchantData.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.MerchantData))
		}
	}
	if in.LanguageCode != "" {
		const prefix string = ",\"lang\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LanguageCode))
	}
	if in.RequiredRectoken {
		const prefix string = ",\"required_rectoken\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.RequiredRectoken).MarshalJSON())
	}
	if in.Rectoken != "" {
		const prefix string = ",\"rectoken\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Rectoken))
	}
	if in.Verification {
		const prefix string = ",\"verification\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Verification).MarshalJSON())
	}
	if in.VerificationType != "" {
		const prefix string = ",\"verification_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.VerificationType))
	}
	if in.Lifetime != 0 {
		const prefix string = ",\"lifetime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Lifetime).MarshalJSON())
	}
	{
		const prefix string = ",\"pre_auth\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.PreAuth).MarshalJSON())
	}
	if in.ResponseURL != "" {
		const prefix string = ",\"response_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ResponseURL))
	}
	if in.ServerCallbackURL != "" {
		const prefix string = ",\"server_callback_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ServerCallbackURL))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreatePaymentRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7856a7d3EncodeGithubComHhh0pEFondyApi7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreatePaymentRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7856a7d3EncodeGithubComHhh0pEFondyApi7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreatePaymentRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7856a7d3DecodeGithubComHhh0pEFondyApi7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreatePaymentRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7856a7d3DecodeGithubComHhh0pEFondyApi7(l, v)
}
